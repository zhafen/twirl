{
    "tags": {
        "PlayerFlag": {},
        "EnemyFlag": {},
        "UnresolvedNameFlag": {},
        "RenderFlag": {},
        "UIRenderFlag": {},
        "ViewFlag": {},
        "DeleteFlag": {},
        "SuspendedFlag": {},
        "WatchTriggerFlag": {}
    },
    "system_components": {
        "SceneComp": {
            "scene_fp": [
                "std::string",
                true
            ],
            "emplace_after_loading": [
                "bool",
                true,
                "false"
            ],
            "emplace_order": [
                "int",
                true,
                "0"
            ],
            "json_data": "json",
            "n_emplaced": [
                "size_t",
                false,
                0
            ]
        },
        "TriggerComp": {
            "n_triggers": [
                "int",
                true,
                0
            ]
        },
        "PairComp": {
            "target_entity": [
                "entt::entity",
                false,
                "entt::null"
            ],
            "source_entity": [
                "entt::entity",
                false,
                "entt::null"
            ],
            "target_entity_name": [
                "EntityName",
                true,
                "\"\""
            ],
            "source_entity_name": [
                "EntityName",
                true,
                "\"\""
            ]
        },
        "SyncPositionComp": {
            "once_only": [
                "bool",
                true,
                "false"
            ]
        },
        "WatchComp": {
            "current_time": [
                "float",
                true,
                "0.0f"
            ],
            "end_time": [
                "float",
                true,
                "1.0f",
                "cfg.T"
            ],
            "end_reached": [
                "bool",
                true,
                "false"
            ]
        },
        "PhysicsComp": {
            "mass": [
                "float",
                true,
                "1.0f"
            ],
            "pos": [
                "sf::Vector2f",
                true,
                "sf::Vector2f(0.0f, 0.0f)",
                "cfg.L"
            ],
            "vel": [
                "sf::Vector2f",
                true,
                "sf::Vector2f(0.0f, 0.0f)",
                "cfg.V"
            ],
            "force": [
                "sf::Vector2f",
                false,
                "sf::Vector2f(0.0f, 0.0f)",
                "cfg.A"
            ],
            "collided": [
                "bool",
                false,
                "false"
            ]
        },
        "DragForceComp": {
            "drag_coefficient": [
                "float",
                true,
                "0.01f",
                "cfg.A"
            ],
            "drag_power": [
                "float",
                true,
                "2.0f"
            ]
        },
        "DurabilityComp": {
            "durability": [
                "float",
                true,
                "1.0f"
            ],
            "durability_loss_per_collision": [
                "float",
                true,
                "0.34f"
            ],
            "durability_regen_rate": [
                "float",
                true,
                "0.0f",
                "1.0f / cfg.T"
            ],
            "delete_at_zero": [
                "float",
                true,
                "true"
            ]
        },
        "PairwiseForceComp": {
            "magnitude": [
                "float",
                true,
                "-1.0f",
                "cfg.A"
            ],
            "softening": [
                "float",
                true,
                "0.0f",
                "cfg.L"
            ],
            "power": [
                "float",
                true,
                "2.0f"
            ],
            "min_distance": [
                "float",
                true,
                "0.1f",
                "cfg.L"
            ],
            "distance_scaling": [
                "float",
                true,
                "1.0f",
                "cfg.L"
            ]
        },
        "CollisionComp": {},
        "MouseButtonReleasedComp": {},
        "CircleComp": [
            {
                "shape": "CenteredCircleShape",
                "radius": [
                    "float",
                    true,
                    "1.0f",
                    "cfg.L"
                ],
                "outline_thickness": [
                    "float",
                    true,
                    "0.0f",
                    "cfg.L"
                ],
                "fill_color": [
                    "sf::Color",
                    true,
                    "sf::Color::White"
                ],
                "outline_color": [
                    "sf::Color",
                    true,
                    "sf::Color::Black"
                ]
            },
            "circlecomp.shape = CenteredCircleShape(circlecomp.radius);\ncirclecomp.shape.setOutlineThickness(circlecomp.outline_thickness);\ncirclecomp.shape.setFillColor(circlecomp.fill_color);\ncirclecomp.shape.setOutlineColor(circlecomp.outline_color);\n"
        ],
        "RectangleComp": [
            {
                "shape": "sf::RectangleShape",
                "size": [
                    "sf::Vector2f",
                    true,
                    "sf::Vector2f(1.0f, 1.0f)",
                    "cfg.L"
                ],
                "pos": [
                    "sf::Vector2f",
                    true,
                    "sf::Vector2f(0.0f, 0.0f)",
                    "cfg.L"
                ],
                "outline_thickness": [
                    "float",
                    true,
                    "0.0f",
                    "cfg.L"
                ],
                "fill_color": [
                    "sf::Color",
                    true,
                    "sf::Color::White"
                ],
                "outline_color": [
                    "sf::Color",
                    true,
                    "sf::Color::Black"
                ]
            },
            "rectanglecomp.shape.setSize(rectanglecomp.size);\nrectanglecomp.shape.setPosition(rectanglecomp.pos);\nrectanglecomp.shape.setOutlineThickness(rectanglecomp.outline_thickness);\nrectanglecomp.shape.setFillColor(rectanglecomp.fill_color);\nrectanglecomp.shape.setOutlineColor(rectanglecomp.outline_color);\n"
        ],
        "ValueBarComp": {
            "shape": "sf::RectangleShape",
            "pos": [
                "sf::Vector2f",
                true,
                "sf::Vector2f(-50.f, -45.f)",
                "cfg.L"
            ],
            "size": [
                "sf::Vector2f",
                true,
                "sf::Vector2f(100.f, 1.0f)",
                "cfg.L"
            ],
            "tracked_value": [
                "float*",
                false,
                "nullptr"
            ],
            "tracked_entity_name": [
                "EntityName",
                true,
                "\"\""
            ]
        },
        "ZOrderComp": {
            "zorder": [
                "int",
                true,
                "0"
            ]
        },
        "TextComp": [
            {
                "text": "CenteredText",
                "string": [
                    "std::string",
                    true,
                    "\"[placeholder text]\""
                ],
                "pos": [
                    "sf::Vector2f",
                    true,
                    "sf::Vector2f(0.f, -25.f)",
                    "cfg.L"
                ],
                "origin": [
                    "sf::Vector2f",
                    true,
                    "sf::Vector2f(0.5f, 0.5f)"
                ],
                "character_size": [
                    "unsigned int",
                    true,
                    "24"
                ]
            },
            "textcomp.text.setString(textcomp.string);\ntextcomp.text.setPosition(textcomp.pos);\ntextcomp.text.setCharacterSize(textcomp.character_size);\n// Origin is set relative to the dimensions of the text\nsf::FloatRect text_rect = textcomp.text.getLocalBounds();\ntextcomp.text.setOrigin(\n    text_rect.left + text_rect.width * textcomp.origin.x,\n    text_rect.top + text_rect.height * textcomp.origin.y);\n"
        ],
        "DebugComp": {
            "verbose": [
                "bool",
                true,
                "true"
            ]
        }
    }
}