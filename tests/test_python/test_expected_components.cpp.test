#include <entt/entity/fwd.hpp>
#include <entt/entity/registry.hpp>
#include <nlohmann/json.hpp>
#include "components/components.h"
#include "config.h"

using json = nlohmann::ordered_json;

namespace twirl {

namespace comp {

void emplaceComponent(entt::registry& registry, entt::entity entity,
                      const std::string& comp_key, const json& comp_json) {
    if (comp_key == "EnemyComp") {
        registry.emplace<EnemyComp>(entity);
    } else if (comp_key == "PhysicsComp") {
        auto physicscomp = comp_json.template get<PhysicsComp>();
        registry.emplace<PhysicsComp>(entity, physicscomp);
    } else if (comp_key == "RenderComp") {
        auto rendercomp = comp_json.template get<RenderComp>();
        registry.emplace<RenderComp>(entity, rendercomp);
    } else {
        throw std::runtime_error("Unknown component type");
    }
}

entt::entity getEntityFromStr(entt::registry& registry, const std::string& input_str) {
    // Parse the input string
    size_t colon = input_str.find('|');
    if (colon == std::string::npos) {
        throw std::runtime_error("Pipe not found in component string");
    }
    std::string comp_key = input_str.substr(0, colon);
    std::string selection_str = input_str.substr(colon + 1);

    // Get the view based on the component string
    if (comp_key == "EnemyComp") {
        return getEntityFromSelectionStr<EnemyComp>(registry, selection_str);
    } else if (comp_key == "PhysicsComp") {
        return getEntityFromSelectionStr<PhysicsComp>(registry, selection_str);
    } else if (comp_key == "RenderComp") {
        return getEntityFromSelectionStr<RenderComp>(registry, selection_str);
    } else {
        throw std::runtime_error("Unknown component type");
    }
}

void debugEntities(entt::registry& registry, std::string message) {
    auto rview = registry.view<DebugComp>();
    bool message_printed = false;
    for (auto [entity, debug_c] : rview.each()) {
        if (!message_printed) {
            std::cout << message << std::endl;
            message_printed = true;
        }
        std::cout << "  entity: " << static_cast<int>(entity) << std::endl;
        auto entity_name_ptr = registry.try_get<EntityName>(entity);

        // Skip the rest if not verbose
        if (!debug_c.verbose) {
            continue;
        }

        if (entity_name_ptr != nullptr) {
            std::cout << "    Entity Name: " << *entity_name_ptr << std::endl;
        }
        auto phys_c_ptr = registry.try_get<PhysicsComp>(entity);
        if (phys_c_ptr != nullptr) {
            auto phys_c = *phys_c_ptr;
            std::cout << "    PhysicsComp:" << std::endl;
            std::cout << "      Position:" << phys_c.pos.x << ", " << phys_c.pos.y << std::endl;
        }
        auto render_c_ptr = registry.try_get<RenderComp>(entity);
        if (render_c_ptr != nullptr) {
            auto render_c = *render_c_ptr;
            std::cout << "    RenderComp:" << std::endl;
            auto pos = render_c.shape.getPosition();
            std::cout << "      Position:" << pos.x << ", " << pos.y << std::endl;
            std::cout << "      Radius:" << render_c.shape.getRadius() << std::endl;
        }
    }
}


}  // namespace comp
}  // namespace twirl